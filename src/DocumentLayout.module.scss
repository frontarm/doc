$single-column-gutter: 20px;
$twin-column-gutter: 32px;

$max-single-body-width: 700px;
$max-twin-body-width: 602px;

$min-aside-width: 250px;

$max-single-width: 1100px;

@mixin when-single-column {
  @media (max-width: #{$max-single-width}) {
    @content;
  }
}
@mixin when-twin-column {
  @media (min-width: #{$max-single-width + 1px}) {
    @content;
  }
}

:local {
  .Aside {
    @include when-single-column {
      max-width: $max-single-body-width + $single-column-gutter*2;
      margin-left: auto;
      margin-right: auto;
      width: 100%;
    }
    @include when-twin-column {
      min-width: $min-aside-width;
      float: right;
      width: calc(100% - #{$max-twin-body-width + $twin-column-gutter});
    }
  }

  .Block {
    @include when-single-column {
      max-width: $max-single-body-width;
      margin-left: auto;
      margin-right: auto;
      width: calc(100% - #{$single-column-gutter*2});
    }
    @include when-twin-column {
      max-width: $max-twin-body-width;
      margin-left: $twin-column-gutter;
      margin-right: $twin-column-gutter;
      width: calc(100% - #{$min-aside-width + $twin-column-gutter*3});
    }

    // Blocks within Asides should add a gutter, but should leave deciding
    // the width to the Aside.
    .Aside & {
      @include when-single-column {
        margin-left: $single-column-gutter;
        margin-right: $single-column-gutter;
        width: calc(100% - #{$single-column-gutter * 2});
      }
      @include when-twin-column {
        margin-left: $twin-column-gutter;
        margin-right: $twin-column-gutter;
        width: calc(100% - #{$twin-column-gutter * 2});
      }
      max-width: none;
    }

    // When a gutter is manually specified around a block, use that instead
    // of applying gutter styles -- but still use the specified max width
    // -- even if inside an Aside.
    .Gutter & {
      @include when-twin-column {
        margin-left: 0;
        margin-right: 0;
      }
    }
  }

  .Gutter {
    @include when-single-column {
      &.half {
        padding-left: $single-column-gutter/2;
        padding-right: $single-column-gutter/2;

        .Block {
          max-width: $max-single-body-width + $single-column-gutter;
        }
      }
      &.full {
        padding-left: $single-column-gutter;
        padding-right: $single-column-gutter;
      }

      .Block {
        width: 100%;
      }
    }
    @include when-twin-column {
      &.half {
        padding-left: $twin-column-gutter/2;
        padding-right: $twin-column-gutter/2;

        .Block {
          max-width: $max-twin-body-width + $twin-column-gutter;
        }
      }
      &.full {
        padding-left: $twin-column-gutter;
        padding-right: $twin-column-gutter;
      }
    }
  }

  // Nested blocks effectively don't do anything.
  .Block .Block,
  .Block .Gutter .Block {
    margin-left: 0;
    margin-right: 0;
    max-width: none;
    width: 100%;
  }

  .AsideOrAfter {
    position: relative;

    @include when-single-column {
      display: flex;
      flex-direction: column-reverse;
    }
  }
}
