@import '../layout.scss';

// Export the variables as part of the CSS module
@value smallGutter: #{$smallGutter};
@value largeGutter: #{$largeGutter};
@value maxSingleBodyWidth: #{$maxSingleBodyWidth};
@value maxTwinBodyWidth: #{$maxTwinBodyWidth};
@value minAsideWidth: #{$minAsideWidth};
@value maxSingleWidth: #{$maxSingleWidth};

.Doc {
  position: relative;

  // These can be used as variables by the app when calculating float insets.
  --single-column-gutter: smallGutter;
  --twin-column-gutter: largeGutter;
  --max-single-body-width: maxSingleBodyWidth;
  --max-twin-body-width: maxTwinBodyWidth;
  --min-aside-width: minAsideWidth;
  --max-single-width: maxSingleWidth;
}

.Aside,
.Float {
  box-sizing: border-box;

  @include when-single-column {
    margin-left: auto;
    margin-right: auto;
    width: 100%;
  }
  @include when-small-single-column {
    max-width: calc(maxSingleBodyWidth + smallGutter*2);
  }
  @include when-large-single-column {
    max-width: calc(maxSingleBodyWidth + largeGutter*2);
  }
}

@include when-twin-column {
  .Aside {
    position: absolute;
    right: 0;
    min-width: calc(minAsideWidth + largeGutter*2);
    width: calc(100% - maxTwinBodyWidth - largeGutter);
  }
  .Float {
    // width: DEFINED WITH INLINE STYLE;
    // min-width: DEFINED WITH INLINE STYLE;
    float: right;
  }
}
@include when-single-column {
  .Float {
    // Override the values that are set via inline style.
    width: 100% !important;
    min-width: none !important;
  }
}

.AsideTop {
  position: relative;

  @include when-twin-column {
    .Aside {
      top: 0;
    }
  }
}

.Block {
  box-sizing: border-box;

  @include when-small-single-column {
    max-width: maxSingleBodyWidth;
    width: calc(100% - smallGutter * 2);

    .Block-margin-none &,
    &.Block-margin-none {
      max-width: calc(maxSingleBodyWidth + smallGutter*2);
      width: 100%;
    }
    .Block-margin-half &,
    &.Block-margin-half {
      max-width: calc(maxSingleBodyWidth + smallGutter);
      width: calc(100% - smallGutter);
    }
    .Aside &,
    .Float & {
      margin-left: smallGutter;
      margin-right: smallGutter;

      .Block-margin-half &,
      &.Block-margin-half {
        margin-left: calc(smallGutter/2);
        margin-right: calc(smallGutter/2);
      }
    }
  }

  @include when-large-single-column {
    max-width: maxSingleBodyWidth;
    width: calc(100% - largeGutter * 2);

    .Block-margin-none &,
    &.Block-margin-none {
      max-width: calc(maxSingleBodyWidth + largeGutter*2);
      width: 100%;
    }
    .Block-margin-half &,
    &.Block-margin-half {
      max-width: calc(maxSingleBodyWidth + largeGutter*1);
      width: calc(100% - largeGutter);
    }

    .Aside &,
    .Float & {
      margin-left: largeGutter;
      margin-right: largeGutter;

      .Block-margin-half &,
      &.Block-margin-half {
        margin-left: calc(largeGutter/2);
        margin-right: calc(largeGutter/2);
      }
    }
  }

  @include when-single-column {
    margin-left: auto;
    margin-right: auto;

    .Aside &,
    .Float & {
      .Block-margin-none &,
      &.Block-margin-none {
        margin-left: 0;
        margin-right: 0;
      }
    }
  }

  @include when-twin-column {
    margin-left: largeGutter;
    margin-right: largeGutter;
    max-width: maxTwinBodyWidth;
    width: calc(100% - minAsideWidth - largeGutter*3);

    .Block-margin-none &,
    &.Block-margin-none {
      margin-left: 0;
      margin-right: 0;
      max-width: calc(maxTwinBodyWidth + largeGutter*2);
      width: calc(100% - minAsideWidth - largeGutter);
    }
    .Block-margin-half &,
    &.Block-margin-half {
      margin-left: calc(largeGutter/2);
      margin-right: calc(largeGutter/2);
      max-width: calc(maxTwinBodyWidth + largeGutter);
      width: calc(100% - minAsideWidth - largeGutter*2);
    }

    .Aside &,
    .Float & {
      width: calc(100% - largeGutter*2);

      .Block-margin-none &,
      &.Block-margin-none {
        width: calc(100%);
      }
      .Block-margin-half &,
      &.Block-margin-half {
        width: calc(100% - largeGutter);
      }
    }     
  }
  
  .Aside &,
  .Float & {
    max-width: none;
  }

  // Nested blocks lose all their layout styles.
  & .Block {
    margin-left: 0;
    margin-right: 0;
    max-width: none;
    width: auto;
  }
}

.Gutter {
  box-sizing: border-box;
  padding: largeGutter;

  &.top-half {
    padding-top: calc(largeGutter/2);
  }
  &.right-half {
    padding-right: calc(largeGutter/2);
  }
  &.bottom-half {
    padding-bottom: calc(largeGutter/2);
  }
  &.left-half {
    padding-left: calc(largeGutter/2);
  }

  &.top-double {
    padding-top: calc(largeGutter*2);
  }
  &.right-double {
    padding-right: calc(largeGutter*2);
  }
  &.bottom-double {
    padding-bottom: calc(largeGutter*2);
  }
  &.left-double {
    padding-left: calc(largeGutter*2);
  }

  @include when-small-single-column {
    padding: smallGutter;

    &.top-half {
      padding-top: calc(smallGutter/2);
    }
    &.right-half {
      padding-right: calc(smallGutter/2);
    }
    &.bottom-half {
      padding-bottom: calc(smallGutter/2);
    }
    &.left-half {
      padding-left: calc(smallGutter/2);
    }

    &.top-double {
      padding-top: calc(smallGutter*2);
    }
    &.right-double {
      padding-right: calc(smallGutter*2);
    }
    &.bottom-double {
      padding-bottom: calc(smallGutter*2);
    }
    &.left-double {
      padding-left: calc(smallGutter*2);
    }
  }

  &.top-none {
    padding-top: 0;
  }
  &.right-none {
    padding-right: 0;
  }
  &.bottom-none {
    padding-bottom: 0;
  }
  &.left-none {
    padding-left: 0;
  }
}
